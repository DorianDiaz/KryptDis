#include "SDK.h"

SDK sdk;

DWORD WINAPI MainThread(HMODULE hModule)
{
    sdk.InitCPython();
    Py_SetProgramName(L"KryptDis");
    PyEval_InitThreads();

    PyGILState_STATE s = PyGILState_Ensure();
    PyRun_SimpleString("import dis, os, sys, re\nreportfile = open(\'report.txt\',\'w\')\nreportfile.write(\'# Report generated by KryptDis.\\n\')\nimports = []\nlinks = []\nif \'pyarmor_runtime\' in dir(): reportfile.write(\'# PyArmor detected!\\n\\n\')\nfor objectName in dir():\n    if objectName in [\'__annotations__\', \'__builtins__\', \'__doc__\', \'__loader__\', \'__name__\', \'__package__\', \'__spec__\', \'__cached__\', \'__file__\', \'imports\', \'links\', \'reportfile\']: continue\n    objectCall = eval(objectName)\n    if type(objectCall).__name__ == \'module\': imports.append(objectName); continue\n    if re.match(r\'(http|https|ftp)\\://([a-zA-Z0-9\\-\\.]+\\.+[a-zA-Z]{2,3})(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\\-\\._\\?\\,\\\'/\\\\\\+&amp;%\\$#\\=~@]*)\',str(objectCall)): links.append(str(objectCall))\n    elif type(objectCall).__name__ == \'type\':\n        for objectName2 in dir(objectCall):\n            if objectName2 in [\'__class__\', \'__delattr__\', \'__dict__\', \'__dir__\', \'__doc__\', \'__eq__\', \'__format__\', \'__ge__\', \'__getattribute__\', \'__gt__\', \'__hash__\', \'__init__\', \'__init_subclass__\', \'__le__\', \'__lt__\', \'__module__\', \'__ne__\', \'__new__\', \'__reduce__\', \'__reduce_ex__\', \'__repr__\', \'__setattr__\', \'__sizeof__\', \'__str__\', \'__subclasshook__\', \'__weakref__\']: continue\n            objectCall2 = eval(objectName2)\n            if re.match(r\'(http|https|ftp)\\://([a-zA-Z0-9\\-\\.]+\\.+[a-zA-Z]{2,3})(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\\-\\._\\?\\,\\\'/\\\\\\+&amp;%\\$#\\=~@]*)\',str(objectCall2)): links.append(str(objectCall2))\n            if type(objectCall2).__name__ == \'function\':\n                try: assembly = \'\\n\'+dis.Bytecode(objectCall2).dis()\n                except Exception: assembly = \'Error disassembling bytecode!\'\n                reportfile.write(f\'Class: {objectName}\\nName: {objectName2}\\nType: {str(type(objectCall2).__name__).replace(\"type\",\"class\")}\\nObject ID: {\"0x{0:0{1}X}\".format(id(objectCall2),16)}\\nAssembly Report: {assembly}\\n\\n\')\n                print(f\'Class: {objectName}\\nName: {objectName2}\\nType: {str(type(objectCall2).__name__).replace(\"type\",\"class\")}\\nObject ID: {\"0x{0:0{1}X}\".format(id(objectCall2),16)}\\nAssembly Report: {assembly}\\n\\n\')\n            else:\n                reportfile.write(f\'Class: {objectName}\\nName: {objectName2}\\nType: {str(type(objectCall2).__name__).replace(\"type\",\"class\")}\\nObject ID: {\"0x{0:0{1}X}\".format(id(objectCall2),16)}\\nContent: {str(objectCall2)}\\n\\n\')\n                print(f\'Class: {objectName}\\nName: {objectName2}\\nType: {str(type(objectCall2).__name__).replace(\"type\",\"class\")}\\nObject ID: {\"0x{0:0{1}X}\".format(id(objectCall2),16)}\\nContent: {str(objectCall2)}\\n\\n\')\n    if type(objectCall).__name__ == \'function\':\n        try: assembly = \'\\n\'+dis.Bytecode(objectCall).dis()\n        except Exception: assembly = \'Error disassembling bytecode!\'\n        reportfile.write(f\'Class: Main\\nName: {objectName}\\nType: {str(type(objectCall).__name__).replace(\"type\",\"class\")}\\nObject ID: {\"0x{0:0{1}X}\".format(id(objectCall),16)}\\nAssembly Report: {assembly}\\n\\n\')\n        print(f\'Class: Main\\nName: {objectName}\\nType: {str(type(objectCall).__name__).replace(\"type\",\"class\")}\\nObject ID: {\"0x{0:0{1}X}\".format(id(objectCall),16)}\\nAssembly Report: {assembly}\\n\\n\')\n    else:\n        reportfile.write(f\'Class: Main\\nName: {objectName}\\nType: {str(type(objectCall).__name__).replace(\"type\",\"class\")}\\nObject ID: {\"0x{0:0{1}X}\".format(id(objectCall),16)}\\nContent: {str(objectCall)}\\n\\n\')\n        print(f\'Class: Main\\nName: {objectName}\\nType: {str(type(objectCall).__name__).replace(\"type\",\"class\")}\\nObject ID: {\"0x{0:0{1}X}\".format(id(objectCall),16)}\\nContent: {str(objectCall)}\\n\\n\')\nreportfile.write(f\'Imports: {\", \".join(imports)}\\nLinks: {\", \".join(links)}\\n\')\nprint(f\'Imports: {\", \".join(imports)}\\nURLs: {\", \".join(links)}\\n\')\nreportfile.close()\nos.system(\'start report.txt\')\nsys.exit()");
    PyGILState_Release(s);
    FreeLibraryAndExitThread(hModule, 0);
    CloseHandle(hModule);
}

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        CloseHandle(CreateThread(0, 0, (LPTHREAD_START_ROUTINE)MainThread, hModule, 0, 0));
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

